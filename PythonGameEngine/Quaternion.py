# Generated by GPT

import math

class Quaternion:
    def __init__(self, w=1.0, x=0.0, y=0.0, z=0.0):
        self.w = w
        self.x = x
        self.y = y
        self.z = z

    def __add__(self, other):
        return Quaternion(self.w + other.w, self.x + other.x, self.y + other.y, self.z + other.z)

    def __mul__(self, other):
        w = self.w * other.w - self.x * other.x - self.y * other.y - self.z * other.z
        x = self.w * other.x + self.x * other.w + self.y * other.z - self.z * other.y
        y = self.w * other.y + self.y * other.w - self.x * other.z + self.z * other.x
        z = self.w * other.z + self.z * other.w + self.x * other.y - self.y * other.x
        return Quaternion(w, x, y, z)

    def normalize(self):
        length = math.sqrt(self.w * self.w + self.x * self.x + self.y * self.y + self.z * self.z)
        if length == 0:
            return Quaternion()
        return Quaternion(self.w / length, self.x / length, self.y / length, self.z / length)

    def __str__(self):
        return f"Quaternion(w={self.w}, x={self.x}, y={self.y}, z={self.z})"

    def __repr__(self):
        return self.__str__()
